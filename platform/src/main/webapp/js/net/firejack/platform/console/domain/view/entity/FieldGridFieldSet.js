/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 *
 */
Ext.define('OPF.console.domain.view.FieldGridFieldSet', {
    extend: 'Ext.form.FieldSet',
    alias: 'widget.fields-grid-fieldset',
    title: 'Fields',
    padding: 10,

    initComponent: function() {

        this.fieldGrid = Ext.create('Ext.grid.Panel', {
            height: 400,
            flex: 1,

            store: 'Fields',

            columns: [
                OPF.Ui.populateColumn('inherited', '!', {
                    align: 'center',
                    width: 30,
                    renderer: function(inherited, metaData, record) {
                        var iconName = 'table_';
                        var autoGenerated = record.get('autoGenerated');
                        if (autoGenerated) {
                            iconName += 'lock';
                        } else if (inherited) {
                            iconName += 'inherited';
                        } else {
                            iconName += 'own';
                        }
                        return '<img src="' + OPF.Cfg.OPF_CONSOLE_URL + '/images/icons/16/' + iconName + '_16.png">';
                    }
                }),
                OPF.Ui.populateColumn('name', 'Field', {width: 150, renderer: 'htmlEncode'}),
                OPF.Ui.populateColumn('fieldTypeName', 'Type', {width: 150}),
                OPF.Ui.populateColumn('required', 'Required', {trueText: 'Yes', falseText: 'No', width: 100}),
                OPF.Ui.populateColumn('defaultValue', 'Default', {width: 200}),
                OPF.Ui.populateColumn('allowedValues', 'Allowed Values', {flex: 1})
            ],
            tbar: [
                OPF.Ui.createBtn('Add', 50, 'add-field', {iconCls: 'silk-add'}),
                '-',
                OPF.Ui.createBtn('Delete', 55, 'delete-field', {iconCls: 'silk-delete'})
            ]
        });

        this.items = [
            this.fieldGrid
        ];

        this.callParent(arguments);
    },

    getEditorDialog: function() {
        var editorDialog = Ext.WindowMgr.get('fieldEditorDialog');
        if (OPF.isEmpty(editorDialog)) {
            editorDialog = Ext.create('OPF.core.component.editor.FieldEditorDialog', this);
            Ext.WindowMgr.register(editorDialog);
        } else {
            editorDialog.setGrid(this);
        }
        return editorDialog;
    },

    cleanFieldStore: function() {
        var fieldsStore = Ext.StoreManager.lookup('Fields');
        fieldsStore.removeAll();
    }

});