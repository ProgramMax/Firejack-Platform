<?xml version="1.0"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->

<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

    <query name = "ResourceVersion.findByResourceIdCultureAndVersion">
        <![CDATA[
            SELECT rv
            FROM AbstractResourceVersionModel rv
                JOIN FETCH rv.resource r
            WHERE r.id = :resourceId AND rv.culture = :culture AND rv.version = :version
        ]]>
    </query>

    <query name = "ResourceVersion.findLastVersionByResourceIdCulture">
        <![CDATA[
            SELECT rv
            FROM AbstractResourceVersionModel rv
                JOIN FETCH rv.resource r
            WHERE r.id = :resourceId AND rv.culture = :culture AND rv.version = r.lastVersion
        ]]>
    </query>

    <query name = "ResourceVersion.findLastVersionByResourceId">
        <![CDATA[
            SELECT rv
            FROM AbstractResourceVersionModel rv
                JOIN FETCH rv.resource r
            WHERE r.id = :resourceId AND rv.version = r.lastVersion
        ]]>
    </query>

    <query name = "ResourceVersion.readResourcesByLookupList">
        <![CDATA[
            SELECT rv
            FROM AbstractResourceVersionModel rv
                JOIN FETCH rv.resource r
            WHERE r.lookup in (:lookup) AND rv.version = r.lastVersion
        ]]>
    </query>

    <query name = "ResourceVersion.findLastVersionByResourceLookup">
        <![CDATA[
            SELECT rv
            FROM AbstractResourceVersionModel rv
                JOIN FETCH rv.resource r
            WHERE r.lookup = :lookup AND rv.version = r.lastVersion
        ]]>
    </query>

    <query name = "ResourceVersion.findCulturesForLastVersionByResourceIds">
        <![CDATA[
            SELECT DISTINCT rv.culture
            FROM AbstractResourceVersionModel rv
                JOIN rv.resource r
            WHERE r.id IN (:resourceIds) AND rv.version = r.lastVersion
        ]]>
    </query>

    <query name = "ResourceVersion.findByResourceIdAndVersion">
        <![CDATA[
            SELECT rv
            FROM AbstractResourceVersionModel rv
                JOIN FETCH rv.resource r
            WHERE r.id = :resourceId AND rv.version = :version
        ]]>
    </query>

    <query name = "Resource.findAvailableCulturesByCollectionId">
        <![CDATA[
            SELECT DISTINCT (rv.culture)
            FROM CollectionModel c, AbstractResourceVersionModel rv
                JOIN c.collectionMembers cm
            WHERE c.id = :collectionId AND cm.reference.id = rv.resource.id
        ]]>
    </query>

    <query name="Collection.findReferences">
        <![CDATA[
            SELECT cm.reference
            FROM CollectionModel c
                JOIN c.collectionMembers cm
            WHERE c.id = :collectionId
            ORDER BY cm.order ASC
        ]]>
    </query>

    <query name="DataBase.findAllDataSources">
        <![CDATA[
            SELECT db, dm
            FROM DomainModel dm
               INNER JOIN dm.database db
            WHERE dm.lookup like :lookupPrefix
        ]]>
    </query>

    <query name="DataBase.findAllNotAssociatedDatabases">
        <![CDATA[
            SELECT db
            FROM DatabaseModel db
            WHERE db.id NOT IN (
                SELECT dm.database.id FROM DomainModel dm WHERE dm.database IS NOT NULL
            ) AND db.id NOT IN (
                SELECT pm.database.id FROM PackageModel pm WHERE pm.database IS NOT NULL
            ) AND db.main.id IS NULL
        ]]>
    </query>
    <query name="Domain.findXADomains">
        <![CDATA[
            SELECT dm.lookup
            FROM DomainModel dm
            WHERE dm.lookup like :lookupPrefix AND dm.xaSupport = true AND dm.database IS NOT NULL
        ]]>
    </query>
</hibernate-mapping>